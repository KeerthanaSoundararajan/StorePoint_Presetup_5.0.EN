
  <FileID>d43ba8e7-e104-40ee-be2c-2c4c41bd5d86</FileID>
  <LastExport>130777950082248687</LastExport>
  <FileVersion>1.2</FileVersion>
  <Code><![CDATA[<#
.NOTES 
  Created with: SAPIEN Technologies, Inc., PowerShell Studio 2012 v3.1.25
  Created on:   2013-10-28 18:45
  Created by:   Dennis Lindqvist
  Organization: IKEA IT
  Filename: 

  Requirements:
	o	Storepoint_FTP_Config.exe
	o	At least administrator priveligies to setup scheduled task

  Dependencies:
	Powershell 2.0 x86
	Storepoint_FTP_Config.exe

  Aliases used:
	

  Known issues:
	Doesn't work with Windows XP. Requires usage of AT instead.
	Task Scheduler MMC will crash if shceduled folder removed while in focus.
	No error handling yet.

  Online Help: 
	http://technet.microsoft.com/en-us/magazine/hh500719.aspx

  Rev 2.0.0.1	15:42 2015-06-02	Initial version
  Rev 2.0.0.3	20:07 2015-06-08	Added argument -FolderName and changed -Path to -ExecPath
  Rev 2.0.0.4	16:33 2015-06-11	Removed SAREC share on -remove

  TODO: Remove FTP sites at -remove

.SYNOPSIS
  Configures POS Shell with scheduled tasks

.DESCRIPTION
  Schedules POSshell.exe for automatic run at every reboot
  Schedules POSmon.exe for automatic run at every reboot

.PARAMETER [-Remove]
  -Remove deletes the scheduled tasks for Storepoint Configuration

.EXAMPLE
  [Examples of using script]
  [Just add more EXAMPLE]


.INPUTS 
  [Type of input data required] 
 
.OUTPUTS 
  C:\IKEAlogs\...\file.log
#>

param(
	[String]$Remove="",
	[String]$SetupPath=""
)

# Global Constants
	[string]$global:MyVersion = "2,0,0,4"
	[string]$global:MyProjectName = "Storepoint_Presetup"
	[string]$global:MyName = "Setup_FTP_Config"

	[string]$global:MyLogFileFolder = "C:\IKEALogs\IFS"
	[string]$global:ProgramData = [Environment]::GetFolderPath('CommonApplicationData')
	[string]$global:MyDataFolder = $ProgramData + "\IKEA\Storepoint POS Config\" + $MyVersion
	[string]$global:ProgramFiles = [Environment]::GetFolderPath('ProgramFiles')

	# should actually use 
	# Set-Variable global:MyVersion -Value ([string]"0,3,0,8") -option Constant
	# but that's to messy to read :(

	#Task Creation Constants
	[int]$Task_ValidateOnly = 0x1		# Verifies the syntax, but does not register the task
	[int]$Task_Create = 0x2				# Registers the task as a new task
	[int]$Task_Update = 0x4				# Registers the task as an updated version
	[int]$Task_CreateOrUpdate = 0x6		# Either registers the task as new or as an updated version
	[int]$Task_Disable = 0x8			# Disables the existing task
	[int]$Task_DontAddAce = 0x10		# Prevented from adding the allow access-control entry (ACE)
	[int]$Task_IgnoreTriggers = 0x20	# Will not execute when it is registered

	#Task Logon Types
	[int]$TaskLogon_None = 0			# Unspecified. For non-NT credentials
	[int]$TaskLogon_Passw = 1			# Use a password
	[int]$TaskLogon_S4U = 2				# Use existing interactive token using a service for user (S4U) logon
	[int]$TaskLogon_Interactive = 3		# User must already be logged on.
	[int]$TaskLogon_Group = 4			# Group activation
	[int]$TaskLogon_Service = 5			# A Local System, Local Service, or Network Service account is being used
	[int]$TaskLogon_InteractiveOrPassw = 6	# First use the interactive token. 
										# If the user is not logged on then the password is used.

# Global variables
	[int]$global:LogLevel = 1 # set initial level to basic

	$KioskMode_UserName = ""

	$ComputerName = (Get-Item ENV:COMPUTERNAME).value
	$NameSplit = $ComputerName.split("-")
	# Check if computer is Storepoint (-IF0) else assume iPOS
	if ($NameSplit[1].StartsWith("IF0")) {# Storepoint till
		$KioskMode_UserName = "L-SPT-U-" + $NameSplit[0]
		Add-Log "KioskMode_UserName calculated as $KioskMode_UserName" -Level 2
	}
	else {# iPOS till
		$KioskMode_UserName = "L-POS-U-" + $NameSplit[0]
		Add-Log "KioskMode_UserName calculated as $KioskMode_UserName" -Level 2
	}


# Functions
function Add-Log(
	[string]$Entry,
	[int]$Level = 1, # set desired level to Basic if option -Level omitted
	[string]$LogFileName = "Unnamed",
	[string]$LogFileFolder = "C:\IKEALogs"
)

	# 0 - None
	# 1 - Light (default)
	# 2 - Normal
	# 3 - Verbose
	# 4 - Diagnostic
	# 5 - Debug

	{
	if (!$LogLevel) {$LogLevel = 4}
	if ($Level -gt $LogLevel) {return} # if logging level required is higher than global level
	if (!($global:MyName)) {$MyName = $LogFileName} # handle missing variable
	if (!($global:MyLogFileFolder)) {$MyLogFileFolder = $LogFileFolder} # handle missing variable
	
	# Get todays date each time writing to the log to make sure changing log if new day
	$Today = (Get-Date -Uformat "%Y%m%d").ToString()
	$MyLogFileName = $ENV:COMPUTERNAME + "_" + $MyName + "__" + $Today + ".log"
	$MyLogFile = $MyLogFileFolder + "\" + $MyLogFileName
	
	# Check if new log file is needed
	if (!(Test-Path $MyLogFile) -or $Entry -like "Start")
		{
		New-Item $MyLogFileFolder -Type Directory -ErrorAction 'SilentlyContinue'
		New-Item $MyLogFile -Type File -ErrorAction 'SilentlyContinue'
		
		"" | Out-File $MyLogFile -Width 160 -Append
		"****************************" | Out-File $MyLogFile -Width 160 -Append
		$ENV:COMPUTERNAME + "   " + (Get-Date -Format g).ToString() | Out-File $MyLogFile -Width 160 -Append
		$MyName + "   Version: " + $MyVersion | Out-File $MyLogFile -Width 160 -Append
		"****************************" | Out-File $MyLogFile -Width 160 -Append
		
		#Housekeeping, Move all old log files to archive
		$ArchiveFolder = $MyLogFileFolder + "\Archive"
		if (!(Test-Path $ArchiveFolder)) {New-Item $ArchiveFolder -Type Directory -ErrorAction 'SilentlyContinue'}
		
		$colLogFile = Get-ChildItem -Path $MyLogFileFolder | `
		where-object {$_.Name -like "*$MyName*" -and $_.Name -notlike ("*$Today.log") -and -not $_.PSIsContainer}
		if ($colLogFile) {foreach ($file in $colLogFile) {$file.CopyTo("$ArchiveFolder\$file"); $file.Delete()}}
		Remove-Variable colLogFile
		
		#Housekeeping, Delete old log files from arhive
		$10daysago = $(get-date) - $(new-timespan -days 10)
		
		$colArchiveFile = Get-ChildItem -Path $ArchiveFolder | `
		Where-Object {$_.LastWriteTime -lt $10daysago -and -not $_.PSIsContainer}
		if ($colArchiveFile) {foreach ($file in $colArchiveFile) {$file.Delete()}}
		Remove-Variable colArchiveFile
	}
	
	switch ($Level) 
		{
		"4" {$Prefix = "DIAG:   "}
		"5" {$Prefix = "DEBUG:   "}
		default {$Prefix = ""}
	}# end switch
	
	(Get-Date -Format u).ToString() + " - " + $Prefix + $Entry | Out-File $MyLogFile -Width 160 -Append
	
}# end function Add-Log


function Get-RegValueData(
	[string]$RegKey,
	[string]$ValueName,
	[switch]$Silent,
	[switch]$VerySilent
)
	{
	
	if ($VerySilent){
		$Silent = $true
	}
	
	$Hive = $RegKey.split(":")[0]
	if ($Hive -notlike "HKLM" -and $Hive -notlike "HKCU"){
		Add-Log "ERROR:   Registry hive reference invalid!" -Level 1
		Add-Log "ERROR:   in $RegKey" -Level 3
		
		Return -1
	}# endif
		
	$ValueData = (Get-ItemProperty -Path $RegKey -Name $ValueName -ErrorAction 'SilentlyContinue').$ValueName

		if (!$ValueData -and !$Silent){# output error only if not Silent
			Add-Log ("WARNING!   Registry not present: " + $RegKey + "::" + $ValueName) -Level 1
		}
		else { 
			if (!$VerySilent) {# No logs with VerySilent
				Add-Log ("Registry value " + $ValueName + " is: " + $ValueData) -Level 3
				}
		}# end else
	
	return $ValueData
}# end function Get_RegValueData


function Get-LocalAlias(
	[string]$Alias,
	[switch]$Mandatory
)
	{
	$AliasValueData = (Get-RegValueData -RegKey "HKLM:\SOFTWARE\IKEA\IDEM\Config\Aliases" -ValueName $Alias -Silent)
	if ($AliasValueData -like "*To be specified*" -or !$AliasValueData) {# unspecified
		Add-Log "Alias $Alias not specified! Will default to empty value." -Level 1
		if ($Mandatory){
			Add-Log "ERROR:   Alias is missing but are set as Mandatory" -Level
		}# end Mandatory check
		return $null
	}# end if
	else {
		return $AliasValueData
	}
}# end function Get-LocalAlias


Function Get-ScheduleService{
	  New-Object -ComObject schedule.service
} #end function Get-ScheduleService


Function New-ScheduledTaskObject($path) { #returns a taskfolder object
	 $ScheduledTaskObject = Get-ScheduleService
	 $ScheduledTaskObject.Connect()
	 if(-not $path) { $path = "\" }
	 $ScheduledTaskObject.GetFolder($path)
} #end function New-ScheduledTaskObject


Function Get-ScheduledTaskFolder
	($objFolder,
	[switch]$recurse
)
	{ #returns a string representing the path to a task folder
	if($recurse)
	{
	$colFolders = $objFolder.GetFolders(0)
		foreach($item in $colFolders) {
			$item.path
			$subFolder = (New-ScheduledTaskObject -path $item.path)
			Get-ScheduledTaskFolder -folder $subFolder -recurse
		}
    } #end if
	else {
		$objFolder.GetFolders(0) |
		foreach-object { $_.path }
	} #end else
} #end Get-ScheduledTaskFolder


Function New-ScheduledTaskFolder(
	$objFolder,
	$path
)
	{ 
	$objFolder.createFolder($path)
} #end New-ScheduledTaskFolder


Function Remove-ScheduledTaskFolder(
	$objFolder,
	$path
)
	{
	$objFolder.DeleteFolder($path,$null)
} #end Remove-ScheduledTaskFolder


Function New-ScheduledTask(
	[Parameter(Mandatory=$true)]
	[string]$Name,

	[Parameter(Mandatory=$true)]
	[string]$FolderName,

	[int]$TaskFlag = 6,
	[string]$Description,
	[ValidateSet("Boot","Daily","Logon")]
	[string]$Trigger,
	[string]$ExecPath,
	[string]$Argument,
	[string]$Workingdir,
	[string]$UserName,
	$PassWrd = $null,
	[ValidateSet(0,1,2,3,4,5,6)]
	[int]$LogonType = 5
)
	{
	# Connect to Folder
	$objTask = Get-ScheduleService
	$objTask.Connect()
	$objTask_Folder = $objTask.GetFolder("\$FolderName")

	# Add Sync Task / Defintion
	$objTaskDef = $objTask.NewTask(0)

	# Registration
	$objTaskDef_RegInfo = $objTaskDef.RegistrationInfo

	$objTaskDef.RegistrationInfo.Description = $description

	# Settings
	$objTask_Settings = $objTaskDef.Settings

	$objTask_Settings.Enabled = $true
	$objTask_Settings.StartWhenAvailable = $true
	$objTask_Settings.Hidden = $false

	# Triggers
	switch ($trigger){
		"Daily" {
			$objTask_Triggers = $objTaskDef.Triggers
			$objTask_Trigger = $objTask_Triggers.Create(2)
			$objTask_Trigger.StartBoundary = "2013-10-29T01:00:00"
			$objTask_Trigger.DaysInterval = 1
			$objTask_Trigger.Id = "DailyTriggerId"
			$objTask_Trigger.Repetition.Interval = "PT15M"
			$objTask_Trigger.Repetition.Duration = "P1D"
			$objTask_Trigger.Enabled = $true
		}
		"Boot" {
			$objTask_Triggers = $objTaskDef.Triggers
			$objTask_Trigger = $objTask_Triggers.Create(8)
			$objTask_Trigger.Id = "BootTrigger"
			$objTask_Trigger.Enabled = $true
		}
		"Logon" {
			$objTask_Triggers = $objTaskDef.Triggers
			$objTask_Trigger = $objTask_Triggers.Create(9)
			$objTask_Trigger.Id = "LogonTriggerId"
			$objTask_Trigger.Enabled = $true
		}
	}

	# Action
	$ExecPath = """" + $ExecPath + """"
	$objTask_Action = $objTaskDef.Actions.Create(0)
	$objTask_Action.Path = $ExecPath
	$objTask_Action.Arguments = $argument
	$objTask_Action.WorkingDirectory = $workingdir

	# Create Task
	$objTask_Folder.RegisterTaskDefinition($Name, $objTaskDef, $TaskFlag, $UserName, $PassWrd , $LogonType) | out-null
}# end function New-ScheduledTask


Function Remove-ScheduledTask(
	[Parameter(Mandatory=$true)]
	[string]$FolderName
)
	{
	# Connect to Folder
	$objTask = Get-ScheduleService
	$objTask.Connect()
	$objTask_Folder = $objTask.GetFolder("\$FolderName")
	
	# Get Tasks and delete all # Maybe we should wait for them to finish? Dont know.
	$objTasks = $objTask_Folder.GetTasks(0)
	
	foreach ($Task in $objTasks)
		{$objTask_Folder.DeleteTask($Task.Name,0)
	}# end foreach
	
}# end function Remove-ScheduledTask

function Run-ScheduledTask(
	[Parameter(Mandatory=$true)]
	[String]$Name,

	[Parameter(Mandatory=$true)]
	[String]$FolderName
)
	{
	$Unknown = 0
	$Disabled = 1
	$Queued = 2
	$Ready = 3
	$Running = 4

	$objTask = Get-ScheduleService
	$objTask.Connect()
	$objTask_Folder = $objTask.GetFolder($FolderName)

	$objTask_Folder.GetTask($Name).Run(0)

	Add-Log ("Starting: " + $Name) -Level 2
	# Add-Log "Waiting..." -Level 3
	# while ($objTask_Folder.GetTask($Name).State -like $Running) {sleep 1}
	sleep 1 # let TaskScheduler stabilize the next state before polling
	
	Clear-Variable strResult
	Clear-Variable intResult
	$intResult = $objTask_Folder.GetTask($Name).LastTaskResult
	
	switch ($intResult)
		{
		0 {$Status = "OK:   "; $strResult = "completed succesfully"}
		1 {$Status = "ERROR:   "; $strResult = "is incorrect or unkonwn function"}
		10 {$Status = "ERROR:   "; $strResult = "has incorrect environment"}
	}
	
	Add-Log ($Status + "Task " + $Name + " run last: " + $objTask_Folder.GetTask($Name).LastRunTime + "; " + $strResult) -Level 1
	
}# end function Run-ScheduledTask



function Remove-RegKey(
	[string]$RegKey,
	[switch]$VerySilent
)
	{
	$Hive = $RegKey.split(":")[0]
	
	if ($Hive -notlike "HKLM" -and $Hive -notlike "HKCU")
		{
		Add-Log "ERROR:   Registry hive reference invalid!" -Level 1
		Add-Log "ERROR:   in $RegKey" -Level 3
		
		Return -1
	}
	
	if (Test-Path $RegKey) 
		{ 
		Remove-Item $RegKey -Recurse -Force
	
		if (!$VerySilent){
			Add-Log ("Registry key deleted: " + $RegKey) -Level 3
		}

	}
} # end function Remove-RegKey



# Init
	$StopWatch = [Diagnostics.StopWatch]::StartNew()

	# Create log file
	Add-Log "Start" -Level 1

	$AliasRegKey = "HKLM:\SOFTWARE\IKEA\IDEM\Config\Aliases"
	$LogLevel = Get-RegValueData -RegKey $AliasRegKey -ValueName POS_Logging

	Add-Log ("Log level set to " + $LogLevel) -Level 1

# Main

	# Clean up before configuration
	
	# Exit here if tasks is to be removed permanantly
	# Binary Packaged argument handles params as ordered args
	if (($Remove -eq $True) -or ($Remove -like "-remove")) {

		# Remove scheduled tasks
		Remove-ScheduledTask -Folder "FTP_Config"
		Add-Log "Removed all FTP_Config Scheduled tasks" -Level 3
		Remove-ScheduledTaskFolder -objFolder (New-ScheduledTaskObject) -path "\FTP_Config"
		Add-Log "Removed FTP_Config Scheduled tasks folder" -Level 1
	
		#Remove SAREC Share
		if (Get-WmiObject Win32_Share -Filter "name = 'SAREC_Outbound$'"){
			Add-Log "Disabling SAREC share." -Level 4
			(Get-WmiObject Win32_Share -Filter "name = 'SAREC_Outbound$'").Delete()
		}
	
		$StopWatch.Stop()
		Add-Log ("Setup exiting. Execution time: " + $StopWatch.Elapsed.Seconds + " seconds.") -Level 1
		Exit
	}

	# Create Task Folder
	New-ScheduledTaskFolder -objFolder (New-ScheduledTaskObject) -path "\FTP_Config"
	Add-Log "Created FTP_Config Scheduled Folder" -Level 1
	
	# Create tasks in Task Folder
	if ($Remove.Length -ne 0)
		{$SetupPath = $Remove
	}
	elseif ($SetupPath.Length -ne 0)
		{$SetupPath = $SetupPath
	}
	else
		{$SetupPath = $ProgramFiles + "\" + $MyProjectName
	}
	Add-Log "Path to $MyProjectName program folder set to: $SetupPath" -Level 5

	New-ScheduledTask -Name "FTP Configuration" -FolderName "FTP_Config" -Description "" -Trigger "Boot" `
	-ExecPath ($SetupPath + "\Storepoint_FTP_Config.exe") -Argument "" -Workingdir $SetupPath -UserName "System"
	Add-Log "Created scheduled task for FTP Configuration using SYSTEM" -Level 2

	# Run all Storepoint tasks once as part of setup

	Run-ScheduledTask -Name "FTP_Configuration" -Folder "\FTP_Config"
	# if (!$KioskMode_Shell_Executable) {# in kiosked mode schedule POS Shell as well
	#	Run-ScheduledTask -Name "POS Shell" -Folder "\POS_Shell"
	# }# end if
	
	$StopWatch.Stop()
	Add-Log ("Setup exiting. Execution time: " + $StopWatch.Elapsed.Seconds + " seconds.") -Level 1
]]></Code>
  <Assemblies>
    <Assembly>System.Management.Automation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
  <Packager>
    <General>
      <PackageName>Setup_FTP_Config</PackageName>
      <PackageIcon>
      </PackageIcon>
      <ManifestCreation>2</ManifestCreation>
      <CustomManifest>
      </CustomManifest>
      <Platform>0</Platform>
      <RunSTA>0</RunSTA>
      <PowerShellVersion>2</PowerShellVersion>
    </General>
    <Security>
      <Username>
      </Username>
      <Password>
      </Password>
      <SignPackage>False</SignPackage>
      <Certificate>
      </Certificate>
      <CertificatePassword>
      </CertificatePassword>
      <RunAs>0</RunAs>
    </Security>
    <Version>
      <FileVersion>2.0.0.4</FileVersion>
      <ProductVersion>2.0.0.4</ProductVersion>
      <ProductName>Storepoint Presetup</ProductName>
      <Description>Prepares Storepoint for setup</Description>
      <Company>IKEA</Company>
      <Copyright>
      </Copyright>
      <InternalName>Storepoint_Presetup_2.0.EN</InternalName>
      <OriginalFileName>
      </OriginalFileName>
      <Comment>Created by DELIN5</Comment>
    </Version>
  </Packager>
